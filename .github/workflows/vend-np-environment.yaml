name: Vend a new non-prod environment

on:
  repository_dispatch:
    types: [vend-aws-account-np]

env:
  GH_PAT: ${{ secrets.GH_PAT_TO_2025_04_30 }}
  IPAM_BASE_URL: "https://8tni4nw7e5.execute-api.eu-west-2.amazonaws.com/main/v1/ipam"
  IPAM_API_KEY: ${{ secrets.IPAM_API_KEY_NONPROD }}
  UkhsaAwsEnterpriseAppObjectId: "537f6b3f-5e02-4ed3-b7a7-5400f8215b74"
  UkhsaAwsEnterpriseAppUserRoleId: "8774f594-1d59-4279-b9d9-59ef09a23530"
  MoverWorkflowEnterpriseAppObjectId: "32058243-c6d3-4bbf-95d6-9a7b072b5570"
  AWS_REGION: "eu-west-2"

permissions:
  contents: read
  id-token: write

jobs:
  create-groups:
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.vend_roles != null }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Log in to Azure using federated credentials
      #   uses: azure/login@v2
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     allow-no-subscriptions: true

      # - name: Authenticate with Microsoft Graph (Federated Credentials)
      #   shell: pwsh
      #   run: |
      #     $token = (az account get-access-token --resource https://graph.microsoft.com | ConvertFrom-Json).accessToken
      #     $secureToken = ConvertTo-SecureString $token -AsPlainText -Force
      #     Connect-MgGraph -AccessToken $secureToken

      - name: Set environment variables from payload
        shell: pwsh
        run: |
          $workloadShortName = "${{ github.event.client_payload.vend_workload_short_name }}"
          $workloadShortName = $workloadShortName.Substring(0,1).ToUpper() + $workloadShortName.Substring(1).ToLower()

          $environment = "${{ github.event.client_payload.vend_environment_type }}"

          if ($null -ne "${{ github.event.client_payload.vend_environment_name }}") {
              $environment = $environment + ".${{ github.event.client_payload.vend_environment_name }}"
          }

          $Roles = "Admin"
          if ($null -ne "${{ github.event.client_payload.vend_roles }}") {
              $Roles = "${{ github.event.client_payload.vend_roles }}"
          }

          echo $workloadShortName
          echo $environment
          echo $Roles

          echo "WORKLOAD_SHORT_NAME=$workloadShortName" | Out-File -FilePath $Env:GITHUB_ENV -Append
          echo "ENVIRONMENT=$environment" | Out-File -FilePath $Env:GITHUB_ENV -Append
          echo "ROLES=$Roles" | Out-File -FilePath $Env:GITHUB_ENV -Append

      - name: Create Groups and Distribution Lists
        shell: pwsh
        run: |
          # Import Utils.psm1
          Import-Module ./lib/group-utils.psm1

          # Define variables from environment
          $workloadShortName="${{ env.WORKLOAD_SHORT_NAME }}"
          $roles="${{ env.ROLES }}"
          $environment="${{ env.ENVIRONMENT }}"

          # # Connect to Microsoft Graph
          # $token = (az account get-access-token --resource https://graph.microsoft.com | ConvertFrom-Json).accessToken
          # $secureToken = ConvertTo-SecureString $token -AsPlainText -Force
          # Connect-MgGraph -AccessToken $secureToken

          # # Get existing groups in Entra ID
          # $groups = Get-MgGroup -All:$true

          # # Create distribution lists in Entra ID
          # $securityDl = Get-DistributionList -Name "AWS-Hosting-$workloadShortName-Security" -Description "Security Contact email address for $workloadShortName AWS accounts" -Groups $groups

          # $opsDl = Get-DistributionList -Name "AWS-Hosting-$workloadShortName-Operations" -Description "Operations Contact email address for $workloadShortName AWS accounts" -Groups $groups

          # # Define Enterprise App configuration for AWS SSO
          # $enterpriseAppConfig = @{
          #   ObjectId = '${{ env.UkhsaAwsEnterpriseAppObjectId }}'
          #   UserRoleId = '${{ env.UkhsaAwsEnterpriseAppUserRoleId }}'
          # }

          # # Create workload groups in Entra ID
          # Add-RoleGroups -roles "${{ env.ROLES }}" `
          #                -ownerSPN "${{ env.MoverWorkflowEnterpriseAppObjectId }}" `
          #                -workloadShortName $workloadShortName `
          #                -environment $environment `
          #                -enterpriseAppConfig $enterpriseAppConfig `
          #                -tenantId "${{ secrets.AZURE_TENANT_ID }}" `
          #                -isUkhsaGroupFormat $true `
          #                -groups $groups

  # get-vpc-cidr:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.client_payload.vend_vpc_config != null }}
  #   needs: create-groups

  #   outputs:
  #     output1: ${{ steps.get-vpc-cidr.outputs.formattedOutput }}
  #     output2: ${{ steps.get-vpc-cidr.outputs.Cidr }}

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #       with:
  #         token: ${{ env.GH_PAT }}

  #     - name: Run networkUtils.psm1 for VPC configuration
  #       id: get-vpc-cidr
  #       run: |
  #         Import-Module ./lib/ipam/networkUtils.psm1

  #         $vpcDetails = Get-VpcDetails -VpcType "${{ github.event.client_payload.vend_vpc_config.vpc_type }}" -VpcSize "${{ github.event.client_payload.vend_vpc_config.vpc_size }}"
  #         Write-Host "VPC Details: $($vpcDetails | Out-String)"

  #         $formattedOutput = "$($vpcDetails.TransitSubnetNewBits),$($vpcDetails.TransitSubnetNetNum)"
  #         Write-Host "Formatted Output: $formattedOutput"
  #         "formattedOutput=$formattedOutput" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

  #         $Cidr = Add-IpamCidr -ipamBaseUrl "${{ env.IPAM_BASE_URL }}" -prefix "$($vpcDetails.CidrPrefix)" -requestor "${{ github.event.client_payload.vend_vpc_config.requestor }}" -awsIpamApiKey "${{ env.IPAM_API_KEY }}" -supernet "$($vpcDetails.IpamSupernet)"
  #         Write-Host "Cidr: $Cidr"
  #         "Cidr=$Cidr" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
  #       shell: pwsh

  #     - name: Set outputs
  #       run: |
  #         echo "${{ steps.get-vpc-cidr.outputs.formattedOutput }}"
  #         echo ${{ steps.get-vpc-cidr.outputs.Cidr }}

  process-request:
    runs-on: ubuntu-latest
    needs: [create-groups]
    # if: ${{ needs.get-vpc-cidr.result == 'success' || needs.get-vpc-cidr.result == 'skipped' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ env.GH_PAT }}

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ env.GH_PAT }}" | gh auth login --with-token

      - name: Make the script executable
        run: chmod +x scripts/build-tfvars-file.sh

      - name: calculate-terraform-environment
        id: calculate-terraform-environment
        run: |
          vend_workload_short_name="${{ github.event.client_payload.vend_workload_short_name }}"
          vend_environment_type="${{ github.event.client_payload.vend_environment_type }}"
          vend_environment_name="${{ github.event.client_payload.vend_environment_name }}"

          echo  "vend_workload_short_name ${{ github.event.client_payload.vend_workload_short_name }}"
          echo  "vend_environment_type ${{ github.event.client_payload.vend_environment_type }}"
          echo  "vend_environment_name ${{ github.event.client_payload.vend_environment_name }}"

          terraformEnvironment=$vend_workload_short_name-$vend_environment_type


          if ($null -ne "${{ github.event.client_payload.vend_environment_name }}") {
              $terraformEnvironment = $terraformEnvironment + "-$vend_environment_name"
          }

          echo "terraformEnvironment: $terraformEnvironment"

          echo "terraformEnvironment=$terraformEnvironment" >> $GITHUB_OUTPUT

      - name: Generate .tfvars File
        env:
          PAYLOAD: "${{ toJson(github.event.client_payload) }}"
          formattedOutput: ${{ needs.get-vpc-cidr.outputs.output1 }}
          Cidr: ${{ needs.get-vpc-cidr.outputs.output2 }}
        run: |

          terraformEnvironment="${{ steps.calculate-terraform-environment.outputs.terraformEnvironment }}" 
          echo "terraform environment - $terraformEnvironment"


          ./scripts/build-tfvars-file.sh \
            "${{ github.event.client_payload.vend_workload_short_name }}" \
            "${{ github.event.client_payload.vend_environment_type }}" \
            "${{ github.event.client_payload.vend_environment_name }}" \
            "${{ github.event.client_payload.vend_email_addresses.email_address }}" \
            "${{ github.event.client_payload.vend_email_addresses.ops_dl_email_address }}" \
            "${{ github.event.client_payload.vend_email_addresses.security_dl_email_address }}" \
            "${{ github.event.client_payload.vend_roles }}" \
            "${{ github.event.client_payload.vend_sub_domains.dns_sub_domains }}" \
            "${{ github.event.client_payload.vend_sub_domains.ses_sub_domains }}" \
            "${{ github.event.client_payload.vend_sub_domains.vend_security_class }}" \
            "${{ steps.calculate-terraform-environment.outputs.terraformEnvironment }}" \
            "${{ env.formattedOutput }}" \
            "${{ env.Cidr }}" \

      - name: Display tfvars file
        run: |
          echo "-----the file-----"
          terraformEnvironment="${{ steps.calculate-terraform-environment.outputs.terraformEnvironment }}" 
          filename="etc/env_eu-west-2_$terraformEnvironment.tfvars"
          echo "filename: $filename"
          value="`cat $filename`"
          echo "$value"

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: arn:aws:iam::359337185549:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: 1.7.0

      - name: Run terraform plan avm
        run: |
          make terraformrc
          terraformEnvironment="${{ steps.calculate-terraform-environment.outputs.terraformEnvironment }}"
          ./bin/terraform.sh -n -w -r eu-west-2 -p halo -g np -e "$terraformEnvironment" -c avm -a plan

      # - name: Run terraform apply avm
      #   run: |
      #     make terraformrc
      #     terraformEnvironment="${{ steps.calculate-terraform-environment.outputs.terraformEnvironment }}"
      #     ./bin/terraform.sh -n -w -r eu-west-2 -p halo -g np -e  "$terraformEnvironment" -c avm -a apply
