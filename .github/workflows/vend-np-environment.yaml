name: Vend a new non-prod environment

on:
  repository_dispatch:
    types: [vend-aws-account-np]

env:
  GH_PAT: ${{ secrets.GH_PAT_TO_2025_04_30 }}
  IPAM_BASE_URL: "https://8tni4nw7e5.execute-api.eu-west-2.amazonaws.com/main/v1/ipam"
  IPAM_API_KEY: ${{ secrets.IPAM_API_KEY_NONPROD }}
  UkhsaAwsEnterpriseAppObjectId: "537f6b3f-5e02-4ed3-b7a7-5400f8215b74"
  UkhsaAwsEnterpriseAppUserRoleId: "8774f594-1d59-4279-b9d9-59ef09a23530"
  MoverWorkflowEnterpriseAppObjectId: "32058243-c6d3-4bbf-95d6-9a7b072b5570"
  AWS_REGION: "eu-west-2"

permissions:
  contents: read
  id-token: write

jobs:
  create-groups:
    runs-on: ubuntu-latest
    outputs:
      securityDlEmailAddress: ${{ steps.create-groups-and-distribution-lists.outputs.securityDlEmailAddress }}
      opsDlEmailAddress: ${{ steps.create-groups-and-distribution-lists.outputs.opsDlEmailAddress }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables from payload
        shell: pwsh
        run: |
          $workloadShortName = "${{ github.event.client_payload.vend_workload_short_name }}"
          $workloadShortName = $workloadShortName.Substring(0,1).ToUpper() + $workloadShortName.Substring(1).ToLower()

          $environment = "${{ github.event.client_payload.vend_environment_type }}"

          if ($null -ne "${{ github.event.client_payload.vend_environment_name }}") {
              $environment = $environment + ".${{ github.event.client_payload.vend_environment_name }}"
          }

          $Roles = "Admin"
          if ($null -ne "${{ github.event.client_payload.vend_roles }}") {
              $Roles = "${{ github.event.client_payload.vend_roles }}"
          }

          echo $workloadShortName
          echo $environment
          echo $Roles

          echo "WORKLOAD_SHORT_NAME=$workloadShortName" | Out-File -FilePath $Env:GITHUB_ENV -Append
          echo "ENVIRONMENT=$environment" | Out-File -FilePath $Env:GITHUB_ENV -Append
          echo "ROLES=$Roles" | Out-File -FilePath $Env:GITHUB_ENV -Append

      - name: Create Groups and Distribution Lists
        id: create-groups-and-distribution-lists
        shell: pwsh
        run: |
          $securityDl = "securityDlEmail"
          $opsDl = "opsDlEmail"



          "opsDlEmailAddress=$opsDl.toLower()" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          "securityDlEmailAddress=$securityDl.toLower()" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

  process-request:
    runs-on: ubuntu-latest
    needs: [create-groups]
    # if: ${{ needs.get-vpc-cidr.result == 'success' || needs.get-vpc-cidr.result == 'skipped' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Make the script executable
        run: chmod +x scripts/build-tfvars-file.sh

      - name: calculate-terraform-environment
        id: calculate-terraform-environment
        run: |
          vend_workload_short_name="${{ github.event.client_payload.vend_workload_short_name }}"
          vend_environment_type="${{ github.event.client_payload.vend_environment_type }}"
          vend_environment_name="${{ github.event.client_payload.vend_environment_name }}"

          echo  "vend_workload_short_name ${{ github.event.client_payload.vend_workload_short_name }}"
          echo  "vend_environment_type ${{ github.event.client_payload.vend_environment_type }}"
          echo  "vend_environment_name ${{ github.event.client_payload.vend_environment_name }}"


          terraformEnvironment="${vend_workload_short_name}-${vend_environment_type}"

          if [[ -n "$vend_environment_name" ]];
          then
              terraformEnvironment="$terraformEnvironment-$vend_environment_name"
          fi

          echo "terraformEnvironment: $terraformEnvironment"
          echo "terraformEnvironment=$terraformEnvironment" >> $GITHUB_OUTPUT

      - name: Generate .tfvars File
        run: |
          securityDlEmailAddress="${{ needs.create-groups.outputs.securityDlEmailAddress }}"
          opsDlEmailAddress="${{ needs.create-groups.outputs.opsDlEmailAddress }}"

          formattedOutput="${{ needs.get-vpc-cidr.outputs.output1 }}"
          cidr="${{ needs.get-vpc-cidr.outputs.output2 }}"
          terraformEnvironment="${{ steps.calculate-terraform-environment.outputs.terraformEnvironment }}" 
          echo "securityDlEmailAddress: $securityDlEmailAddress"
          echo "opsDlEmailAddress: $opsDlEmailAddress"


          ./scripts/build-tfvars-file.sh \
            "${{ github.event.client_payload.vend_workload_short_name }}" \
            "${{ github.event.client_payload.vend_environment_type }}" \
            "${{ github.event.client_payload.vend_environment_name }}" \
            "$opsDlEmailAddress" \
            "$securityDlEmailAddress" \
            "${{ github.event.client_payload.vend_roles }}" \
            "${{ github.event.client_payload.vend_sub_domains.dns_sub_domains }}" \
            "${{ github.event.client_payload.vend_sub_domains.ses_sub_domains }}" \
            "${{ github.event.client_payload.vend_sub_domains.vend_security_class }}" \
            "$terraformEnvironment" \
            "$formattedOutput" \
            "$cidr" \

      - name: Display tfvars file
        run: |
          echo "-----the file-----"
          terraformEnvironment="${{ steps.calculate-terraform-environment.outputs.terraformEnvironment }}" 
          filename="etc/env_eu-west-2_$terraformEnvironment.tfvars"
          echo "filename: $filename"
          value="`cat $filename`"
          echo "$value"

      # - name: configure aws credentials
      #   uses: aws-actions/configure-aws-credentials@v4.1.0
      #   with:
      #     role-to-assume: arn:aws:iam::359337185549:role/GitHubAction-AssumeRoleWithAction
      #     role-session-name: GitHub_to_AWS_via_FederatedOIDC
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Install Terraform
      #   uses: hashicorp/setup-terraform@v2.0.0
      #   with:
      #     terraform_version: 1.7.0

      # - name: Run terraform plan avm
      #   run: |
      #     make terraformrc
      #     terraformEnvironment="${{ steps.calculate-terraform-environment.outputs.terraformEnvironment }}"
      #     ./bin/terraform.sh -n -w -r eu-west-2 -p halo -g np -e "$terraformEnvironment" -c avm -a plan

      # - name: Run terraform apply avm
      #   run: |
      #     make terraformrc
      #     terraformEnvironment="${{ steps.calculate-terraform-environment.outputs.terraformEnvironment }}"
      #     ./bin/terraform.sh -n -w -r eu-west-2 -p halo -g np -e  "$terraformEnvironment" -c avm -a apply
